// 객체지향
// 컴퓨터 프로그래밍 패러다임 중 하나 데이터를 추상화시켜 상태와 행위를 가진 객체로 만든다음 객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍이다.

장점 : 코드 재사용 유지보수에 좋음
단점 : 처리속도가 느림 

// 라이브러리, 프레임워크
// 프레임워크 개발자가 개발하기 좋은 환경을 제공해줌 제어의 흐름을 프레임워크가 가짐.
// 라이브러리 개발자가 필요시에 사용할 수 있음 제어의 흐름을 개발자가 가짐.

// 브라우저 렌더링
// HTML를 파싱해서 DOM tree 생성
// CSS파일 파싱해서 CSSOM tree 생성
// DOM과 CSSOM의 정보를 바탕으로 실제 브라우저화면에 노출이 되어야하는 노드들의 Render tree 생성
// 렌더트리의 노드들이 브라우저 뷰포트에 어느 위치 어떤 크기로 배치되는지 계산
// 화면에 나타남.

// Rest API
// Rest기반으로 만들어진 API입니다. 
// Rest란? HTTP URI로 자원을 명시하고 HTTP Method를 사용하여 CRUD를 적용시킵니다. 
https://khj93.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-REST-API%EB%9E%80-REST-RESTful%EC%9D%B4%EB%9E%80

// Rest API 설계규칙
// 1. URI는 동사보다는 명사를 대문자보다 소문자로
// 2. 마지막에 /(슬래시)는 포함하지 않는다.
// 3. 파일 확장자는 포함하지 않는다.
// 4. 행위는 포함하지 않는다.
// 5. 언더바 대신 하이폰을 사용.

// RestFul API
// Rest의 원리를 따르는 시스템을 의미합니다. Rest API설계 규칙을 사용한 것을 RestFul API라고 합니다.

// RestAPI 설계규칙
// 소문자를 사용하여야 한다.
// 마지막에 /(슬래시)를 포함하지 않는다.
// 언더바 말고 하이픈을 사용한다. _말고 -
// 파일확장자는 URI에 포함하지 않는다.
// 행위를 표현하지 않는다.

// CORS
// 교차출처리소스이며 현재 웹페이지에서 제공해주는 리소스대신 다른 웹페이지의 리소스를 요청하는 것
// 브라우저는 CORS를 일으켜서 중요한 데이터가 해킹당하지 않게 해준다.
// CORS를 사용하지 않으면 웹페이지 해킹 및 개인정보 유출 우려가 있다.

// DNS
// 도메인 네임 시스템이라고 하며 URL들의 이름과 IP주소를 저장하고 있는 데이터베이스로 웹사이트 주소록 입니다.
// 숫자로 된 IP말고 알기 쉽게 주소를 알려줍니다.

// URI, URL
// 통합 자원 식별자(URI), 위치(URL)
// 인터넷 리소스 자원을 식별해준다. URI
// 인터넷 리소스 위치를 나타냄. URL 

// Webpack, Babel, Polyfill
// 웹팩은 JS, CSS등을 브라우저에서 실행이 가능하게 도와줌. - 모든 파일들을 하나의 모듈로 모아줌 
// 바벨은 최신 자바스크립트 코드를 구형 브라우저에서도 실행이 될 수 있게 도와주는 컴파일러 입니다. - 코드 변환기
// 폴리플은 브라우저가 지원을 안하는데 지원 가능하도록 해주는 역할을 함.

// 로컬, 세션, 쿠키
// 로컬스토리지는 브라우저 로컬안에 데이터를 저장하고 브라우저가 꺼져도 데이터가 저장됩니다.
// 세션스토리지는 로컬과 비슷하지만 브라우저가 꺼지면 데이터가 삭제 됩니다.
// 쿠키는 만료시간을 정할 수 있고 시간이 지나면 사라지게 된다.

// MVC, MVVM
// 모델 뷰 컨트롤러 
// 모델 -> 데이터 처리하는 곳, 뷰 -> 사용자에게 보여주는 UI, 컨트롤러 -> 사용자 입력 및 처리를 해준다. 
// 사용자 액션이 컨트롤러에 들어오면 컨트롤러는 모델을 나타내줄 뷰를 선택하고 뷰는 모델을 이용하여 화면에 보여준다.

// 시멘틱태그
// 의미가 있는 태그를 뜻함 div와 다르게 section, header 등등 의미있는 태그를 뜻한다.
// 사용시 개발에 용이하고 가독성에 좋고 SEO에 도움이 됩니다.

// CI/CD
// 지속적인 통합/ 서비스 제공 및 배포
// CI 레포지토리 CD 지속적인 서비스 제공 혹은 지속적인 배포
// CI - 어플리케이션의 새로운 코드 변경 사항이 정기적으로 빌드 및 테스트 되어 공유 레포지토리에 통합히는 것을 의미
// CI의 핵심 목표는,버그를 신속하게 찾아 해결하고,소프트웨어의 품질을 개선하고,새로운 업데이트의 검증 및 릴리즈의 시간을 단축시키는 것
// CD - 개발자의 변경 사항이 레포지토리를 넘어, 고객의 프로덕션(Production) 환경까지 릴리즈 되는 것

// 프로세스와 메소드
// 프로세스 - 운영체제에서 자원을 할당 받음.
// 메소드 - 프로세스가 할당 받은 자원을 이용한다.

// NPM이란
// Nodo.js로 만들어진 모듈을 웹에서 받아서 설치하고 관리해주는 프로그램 
// 자바스크립트 프로그래머들이 패키지를 만들어서 npm 코드를 공개한다. npm i 패키지명으로 설치를 진행할 수 있다.

// 크로스브라우징
// 어떤 환경에서도 동일하게 작동하는 것 
// 익스플로러기준으로 만든 웹페이지가 크롬, 마이크로엣지에도 동일한 페이지기능을 사용할 수 있게 해준다.

