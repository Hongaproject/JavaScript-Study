MVC패턴

Moder-View-Controller를 뜻하고 

모델은 데이터를 처리하는 곳
뷰는 화면을 보여주는 곳
컨트롤러는 뷰랑 모델을 연결해주는 인터페이스 

컨트롤러서 사용자 입력 및 처리 받음 -> 모델은 데이터 받아서 업데이트 진행 -> 뷰는 모델의 업데이트 내용을 화면으로 보여 줌. 

MVC 장점
1. 컴포넌트를 역할 별로 분리해서 사용하기 때문에 유지보수가 좋고 가독성과 코드 재사용성이 증가 됨.
2. 컴포넌트를 분리해서 사용하기 때문에 협업시에 개발자들 간에 커뮤니케이션에 도움이 됩니다.

MVC 한계점
1. 양방향 데이터 흐름을 가진다.
2. Massive-View-Controller현상이 발생 된다. -> Model과 View의 의존성을 완전히 분리시킬 수 없다.

            1모델    1뷰 
컨트롤러는   2모델    2뷰
            3모델    3뷰

이런 구조인데 프로젝트가 커질수록 복잡도가 높아지게 된다.
우선 Model이 업데이트가 되면 View에게 전달을 해줌. 근데 View도 Model을 업데이트 시킬 수 있음.

예시로 1Model이 업데이트 되서 1View에게 전달해줬는데 2View가 3Model을 업데이트 시키고 3Model은 3View를 업데이트 시킴
이러면서 복잡도가 커지게 되고 이렇게 되면 코드 가독성과 재사용성이 떨어지며 유지보수에 어려움이 생긴다. 그러고 개발자를 당황시킬 버그가 생길수 있다.
