// Promise
// 콜백 함수를 사용하다보면 매개변수로 넘겨주는 콜백함수가 반복 되어 코드 들여쓰기가 감당이 안 될정도로 깊어지는 현상을 뜻함.
// 이를 해결하기 위해 es6에서 promise를 도입하게 되었습니다.

// 자바스크립트 비동기 처리 3가지 - Callback Function, Promise, async/await

// promise 3가지 상태와 resolve, reject
대기 : new Promise()를 사용하면 대기 상태가 되며 비동치 처리가 진행중인 상태이다.
이행 : 비동기 처리가 성공되어 resolve를 호출하여 결과 값을 나타낸다.
실패 : 비동기 처리가 실패되어 reject를 호출하여 실패 값을 나타낸다.

// async/await
promise를 간결하게 사용이 가능하고 사용시 코드 가독성과 유지보수에 도움이 됩니다.

async는 함수 앞에 붙으며 async 함수로 만듭니다. async함수는 항상 promise를 반환합니다.
await는 promise객체 앞에 붙여쓰며, 해당 promise가 처리될 때 까지 기다린 후 결과값을 반환 합니다. async함수 내부에서만 사용이 가능합니다.

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function process() {
  console.log('안녕하세요!');
  await sleep(1000); // 1초쉬고
  console.log('반갑습니다!');
}

process();

// try/catch
async함수 안에서 예외처리를 할 때 사용된다.

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function makeError() {
  await sleep(1000);
  const error = new Error();
  throw error;
}

async function process() {
  try {
    await makeError();
  } catch (e) {
    console.error(e);
  }
}

process();



